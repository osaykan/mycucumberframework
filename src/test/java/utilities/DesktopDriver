package utilities.desktop;

import io.github.bonigarcia.wdm.WebDriverManager;
import utilities.ConfigurationReader;
import utilities.DownloadDirectoryUtil;

import org.openqa.selenium.Dimension;
import org.openqa.selenium.Point;

import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.openqa.selenium.chrome.ChromeOptions;
import org.openqa.selenium.edge.EdgeDriver;
import org.openqa.selenium.firefox.FirefoxDriver;
import org.openqa.selenium.firefox.FirefoxOptions;
import org.openqa.selenium.ie.InternetExplorerDriver;
import org.openqa.selenium.safari.SafariDriver;

import java.util.HashMap;
import java.util.Map;

public class Driver {

	private Driver() {
	}

	static WebDriver driver;

	public static WebDriver getDriver() {
		DownloadDirectoryUtil downloadDirectoryUtil = new DownloadDirectoryUtil();
		downloadDirectoryUtil.createDownloadDirectory();

		if (driver == null) {
			switch (ConfigurationReader.getProperty("cucumber.browser")) {
			case "chrome":
				WebDriverManager.chromedriver().setup();
				Map<String, Object> prefs = new HashMap<String, Object>();
				prefs.put("download.default_directory", downloadDirectoryUtil.getDownloadDirectoryPath());
				ChromeOptions options = new ChromeOptions();
				options.setExperimentalOption("prefs", prefs);
				driver = new ChromeDriver(options);
				// System.setProperty("webdriver.chrome.driver","/home/azureuser/Driver/chromedriver/chromedriver");
				// driver = new ChromeDriver();
				driver.manage().window().setSize(new Dimension(1920, 1080));
				break;

			case "chrome-headless":
				WebDriverManager.chromedriver().setup();
				Map<String, Object> prefsHeadless = new HashMap<String, Object>();
				prefsHeadless.put("download.default_directory", downloadDirectoryUtil.getDownloadDirectoryPath());
				ChromeOptions optionsHeadless = new ChromeOptions();
				optionsHeadless.addArguments("--headless", "--disable-gpu", "--window-size=1920,1200",
						"--ignore-certificate-errors", "--silent");
				optionsHeadless.setExperimentalOption("prefs", prefsHeadless);
				driver = new ChromeDriver(optionsHeadless);
				break;

			case "firefox":
				WebDriverManager.firefoxdriver().setup();
				driver = new FirefoxDriver();
				/*
				 * WebDriverManager.firefoxdriver().setup();
				 * 
				 * Map<String, Object> prefs1 = new HashMap<String, Object>();
				 * prefs1.put("download.default_directory", System.getProperty("user.dir") +
				 * File.separator + "Downloads"); FirefoxOptions options1 = new
				 * FirefoxOptions(); options1.setCapability("prefs",prefs1); driver= new
				 * FirefoxDriver(options1);
				 * 
				 */
				// new ChromeOptions().setExperimentalOption("mobileEmulation", deviceMobEmu1)
				// driver = new FirefoxDriver();
				break;

			case "firefox-headless":

				WebDriverManager.firefoxdriver().setup();
				FirefoxOptions optionsHeadlessFF = new FirefoxOptions();
				optionsHeadlessFF.addArguments("--headless", "--disable-gpu", "--window-size=1920,1200",
						"--ignore-certificate-errors", "--silent");
				driver = new FirefoxDriver(optionsHeadlessFF);

				/*
				 * WebDriverManager.firefoxdriver().setup(); Map<String, Object> prefsHeadless1
				 * = new HashMap<String, Object>();
				 * prefsHeadless1.put("download.default_directory",
				 * System.getProperty("user.dir") + File.separator + "Downloads");
				 * FirefoxOptions optionsHeadless1= new FirefoxOptions();
				 * optionsHeadless1.addArguments("--headless", "--disable-gpu",
				 * "--window-size=1920,1200", "--ignore-certificate-errors", "--silent");
				 * optionsHeadless1.addPreference("prefs", prefsHeadless1); driver = new
				 * FirefoxDriver(optionsHeadless1);
				 * 
				 */

				break;

			case "edge":
				WebDriverManager.edgedriver().setup();
				driver = new EdgeDriver();
				break;

			case "ie":
				WebDriverManager.iedriver().setup();
				driver = new InternetExplorerDriver();
				break;

			case "safari":
				WebDriverManager.getInstance(SafariDriver.class).setup();
				driver = new SafariDriver();
				break;
			}
		}
		driver.manage().window().setPosition(new Point(0, 0));
		return driver;
	}

	public static void closeDriver() {
		if (driver != null) {
			driver.manage().deleteAllCookies();
			driver.quit();
			driver = null;
		}
	}
}
